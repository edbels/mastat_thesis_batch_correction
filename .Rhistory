maxtank < - 5000
prior <- rep(1/maxtank,maxtank)
maxtank < - 5000
prior <- rep(1/maxtank,maxtank)
maxtank < - 5000
maxtank <- 5000
prior <- rep(1/maxtank,maxtank)
lik <- function(tanknum, nbrtank) ifelse (tanknum>nbrtank,0,1)
dat <- 66
lik <- function(tanknum, nbrtank) ifelse (tanknum>nbrtank,0,1/nbrtank)
dat <- 66
x = 0
x<- 2
library(devtools)
#install_github('theislab/kBET',force = TRUE)
install_github("immunogenomics/harmony")
#install_github('theislab/kBET',force = TRUE)
install_github("immunogenomics/harmony")
library(harmony)
#install_github('theislab/kBET',force = TRUE)
install_github("immunogenomics/harmony", force = TRUE)
#install_github('theislab/kBET',force = TRUE)
install_github("immunogenomics/harmony", force = TRUE)
#install_github('theislab/kBET',force = TRUE)
install_github("immunogenomics/harmony", force = TRUE)
install.packages("jsonlite", type = "source")
install.packages("devtools")
install.packages("Seurat")
library(devtools)
library(Seurat)
### load in te file and a make seurat object
cbmc.rna <- as.sparse(read.csv(file = "dataset_seurat_h0/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
library(patchwork)
library(devtools)
library(mclust)
library(lisi)
library(cluster)
library(NMI)
### load in te file and a make seurat object
cbmc.rna <- as.sparse(read.csv(file = "dataset_seurat_h0/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
install.packages("matrix")
library(matrix)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(Matrix)
install.packages("Matrix")
install.packages("Matrix")
### load in te file and a make seurat object
cbmc.rna <- as.sparse(read.csv(file = "dataset_seurat_h0/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
install.packages("Matrix")
install.packages("Matrix")
library(devtools)
library(Seurat)
library(ggplot2)
library(patchwork)
library(devtools)
library(mclust)
library(lisi)
library(cluster)
library(NMI)
library(harmony)
library(Matrix)
### load in te file and a make seurat object
cbmc.rna <- as.sparse(read.csv(file = "dataset_seurat_h0/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
?`as.sparse
?`as.sparse
?`as.sparse
)_
''
cmknlcvmx,
?
end
)
)))
rm(list = ls())
library(devtools)
library(Seurat)
install_github('theislab/kBET',force = TRUE)
install.packages("devtools")
install_github('theislab/kBET',force = TRUE)
devtools::install_github("immunogenomics/lisi")
library(devtools)
library(devtools)
library(devtools)
install_github('theislab/kBET',force = TRUE)
devtools::install_github('theislab/kBET',force = TRUE)
devtools::install_github('theislab/kBET',force = TRUE)
require(devtools)
install_version("backports", version = "1.1.0")
require(devtools)
install_version("backports", version = "1.1.0")
rm(list = ls())
library(devtools)
#devtools::install_github('theislab/kBET',force = TRUE)
#devtools::install_github("immunogenomics/harmony", force = TRUE)
#devtools::install_github("immunogenomics/lisi")
#BiocManager::install("scMerge")
library(ggplot2)
library(SingleCellExperiment)
library(scMerge)
library(scater)
library(Seurat)
library(patchwork)
library(mclust)
library(lisi)
library(cluster)
library(NMI)
library(harmony)
library(Matrix)
library(sctransform)
library(BiocSingular)
setwd("C:/Users/edbels/Documents/GitHub/mastat_thesis")
source("seurat_metrics.R")
### choose option of split
# -> 1: equal split
# -> 2: unequal split
# -> 3: equal split, but with all "Naive CD4 T" in batch one
split_batch <- 1
### load in the file and make a seurat object
cbmc.rna <- as.sparse(read.csv(file = "dataset_seurat_h0/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
cbmc.rna <- CollapseSpeciesExpressionMatrix(cbmc.rna) # deletes HUMAN-
cbmc <- CreateSeuratObject(counts = cbmc.rna)
rm("cbmc.rna") #regularly delete variables that are not used anymore, to reduce memory usage
# Normalize and find HVG, default number is 2000
cbmc <- NormalizeData(cbmc)
cbmc <- FindVariableFeatures(cbmc)
## select PCA's
cbmc <- ScaleData(cbmc)
cbmc <- RunPCA(cbmc, verbose = FALSE)
ElbowPlot(cbmc, ndims = 50) # 20 to 30 PCA's seems good
## implement better way to select number of PCA's?
npca <- 25
## because no cell type labels are present: create "ground truth" from clustering -> cfr vignette
cbmc1 <- cbmc # use new seurat object, because harmany doesn't work when Idents are present
### load in the file and make a seurat object
cbmc.rna <- as.sparse(read.csv(file = "dataset_seurat_h0/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
cbmc <- CreateSeuratObject(counts = cbmc.rna)
rm("cbmc.rna") #regularly delete variables that are not used anymore, to reduce memory usage
# Normalize and find HVG, default number is 2000
cbmc <- NormalizeData(cbmc)
cbmc <- FindVariableFeatures(cbmc)
## select PCA's
cbmc <- ScaleData(cbmc)
cbmc <- RunPCA(cbmc, verbose = FALSE)
ElbowPlot(cbmc, ndims = 50) # 20 to 30 PCA's seems good
## implement better way to select number of PCA's?
npca <- 25
## because no cell type labels are present: create "ground truth" from clustering -> cfr vignette
cbmc1 <- cbmc # use new seurat object, because harmany doesn't work when Idents are present
cbmc1 <- FindNeighbors(cbmc, dims = 1:npca)
cbmc1 <- FindClusters(cbmc1, resolution = 0.8)
cbmc.rna.markers <- FindAllMarkers(cbmc1,
max.cells.per.ident = 100,
min.diff.pct = 0.3,
only.pos = TRUE)
new.cluster.ids <- c("Memory CD4 T", "CD14+ Mono", "Naive CD4 T", "NK",
"CD14+ Mono", "Mouse", "B","CD8 T", "CD16+ Mono",
"T/Mono doublets", "NK", "CD34+", "Multiplets", "Mouse",
"Eryth", "Mk","Mouse", "DC", "pDCs")
names(new.cluster.ids) <- levels(cbmc)
cbmc1 <- RenameIdents(cbmc1, new.cluster.ids)
gt <- Idents(cbmc1)
rm("cbmc.rna.markers","cbmc1")
### explore the data + QC
cbmc[["percent.mt"]] <- PercentageFeatureSet(cbmc, pattern = "^MT-")
head(cbmc@meta.data, 10) # Show QC metrics for the first 5 cells --> no mitochondrial data?
sum(cbmc@meta.data$percent.mt==0) # all percent.mt == 0 --> or naming genes is different?
VlnPlot(cbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(cbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(cbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
#cbmc <- subset(cbmc, subset = nCount_RNA <25000 &
#                 nFeature_RNA < 4500 &
#                 percent.mt < 15) # --> keep all datapoints, if not, uncomment this line
rm('plot1','plot2')
######### split the dataset ###########
if (split_batch ==1) {
groups <- sample(c("1", "2"),
size = dim(GetAssayData(object = cbmc, slot = "counts"))[2],
replace = TRUE)
} else if (split_batch==2) {
groups <- sample(c("1", "2"),
size = dim(GetAssayData(object = cbmc, slot = "counts"))[2],
replace = TRUE,
prob = c(0.2,0.8))
} else if (split_batch ==3) {
groups <- sample(c("1", "2"),
size = dim(GetAssayData(object = cbmc, slot = "counts"))[2],
replace = TRUE)
groups[gt=="Naive CD4 T"] <- 1
}
# split the object in batches
names(groups) <- colnames(cbmc)
cbmc <- AddMetaData(object = cbmc, metadata = groups, col.name = "group") # add batch labels
cbmc <- AddMetaData(object = cbmc, metadata = gt, col.name = "cell_type") # add cell labels
# here, it was one dataset to start with, so do nothing
cbmc1 <- cbmc
#clustering -> creates metadata Suerat_clusters
cbmc1 <- FindNeighbors(cbmc, dims = 1:npca)
cbmc1 <- FindClusters(cbmc1, resolution = 0.8)
# Run umap and tsne for visualisation and performance
cbmc1 <- RunUMAP(cbmc1, reduction = "pca", dims = 1:npca)
# visualisation
reduc <- "umap"
p1merge <- DimPlot(cbmc1, reduction = reduc, group.by = "group")
p2merge <- DimPlot(cbmc1, reduction = reduc, group.by = "seurat_clusters")
p1merge + p2merge
#performance
perf_merge <- seurat.performance(cbmc1,"cell_type","group","seurat_clusters")
